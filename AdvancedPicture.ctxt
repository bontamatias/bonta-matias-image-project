#BlueJ class context
comment0.params=fileName
comment0.target=AdvancedPicture(java.lang.String)
comment0.text=\r\n\ Constructor\ that\ takes\ a\ file\ name\ and\ creates\ the\ picture\r\n\ @param\ fileName\ the\ name\ of\ the\ file\ to\ create\ the\ picture\ from\r\n
comment1.params=width\ height
comment1.target=AdvancedPicture(int,\ int)
comment1.text=\r\n\ Constructor\ that\ takes\ the\ width\ and\ height\r\n\ @param\ width\ the\ width\ of\ the\ desired\ picture\r\n\ @param\ height\ the\ height\ of\ the\ desired\ picture\r\n
comment10.params=mod
comment10.target=void\ modify(int)
comment10.text=\r\n\ Adds\ a\ given\ amount\ to\ each\ color\ value\ in\ each\ pixel\r\n\ @param\ modifier\r\n
comment11.params=cutoff
comment11.target=void\ filter(int)
comment11.text=\r\n\ Filters\ to\ pure\ black\ or\ white\ based\ on\ the\ cutoff\r\n\ @param\ cutoff\r\n
comment12.params=limit
comment12.target=void\ recurse(int)
comment12.text=\r\n\ Indirect\ call\ for\ recursive\ method\r\n\ @param\ amount\ of\ times\ to\ recurse\r\n
comment13.params=step\ limit
comment13.target=void\ doRecurse(int,\ int)
comment13.text=\r\n\ Direct\ call\ for\ recursive\ method\r\n\ @param\ which\ recursion\ currently\ on\r\n\ @param\ amount\ of\ times\ to\ recurse\r\n
comment14.params=
comment14.target=int[][]\ deconstructImage()
comment14.text=\r\n\ Returns\ a\ 2D\ array\ of\ pixels\ for\ the\ image\r\n\ @returns\ int[][]\r\n
comment15.params=pixelData
comment15.target=void\ rebuildImage(int[][])
comment15.text=\r\n\ Builds\ an\ image\ from\ a\ 2D\ array\r\n\ @param\ 2D\ array\ of\ ints\r\n
comment16.params=
comment16.target=java.awt.Color\ random()
comment16.text=\r\n\ Creates\ a\ randomized\ Color\ object\r\n\ @returns\ Color\r\n
comment2.params=copyPicture
comment2.target=AdvancedPicture(Picture)
comment2.text=\r\n\ Constructor\ that\ takes\ a\ picture\ and\ creates\ a\ copy\ of\ that\ picture\r\n
comment3.params=image\ xStart\ yStart
comment3.target=void\ copyTo(SimplePicture,\ int,\ int)
comment3.text=\r\n\ Method\ to\ copy\ one\ image\ onto\ another\ image\ at\ given\ coordinates\r\n\ @param\ image\ to\ copy\r\n\ @param\ x\ coordinate\ to\ start\ at\r\n\ @parama\ y\ coordinate\ to\ start\ at\r\n
comment4.params=
comment4.target=void\ mirrorVertical()
comment4.text=\r\n\ Mirrors\ this\ image\ vertically,\ top\ copied\ to\ bottom\r\n
comment5.params=
comment5.target=void\ mirrorHorizontal()
comment5.text=\r\n\ Mirrors\ this\ image\ horizontally,\ left\ copied\ to\ right\r\n
comment6.params=
comment6.target=void\ mirrorVerticalInvert()
comment6.text=\r\n\ Mirrors\ this\ image\ vertically,\ bottom\ copied\ to\ top\r\n
comment7.params=
comment7.target=void\ mirrorHorizontalInvert()
comment7.text=\r\n\ Mirrors\ this\ image\ horizontally,\ right\ copied\ to\ left\r\n
comment8.params=
comment8.target=void\ pixelSort()
comment8.text=\r\n\ Sorts\ pixels\ in\ rows,\ not\ really\ sure\ why\ I\ did\ this,\ it\ sorts\ the\ raw\ pixel\ data\ in\ hex...\ so\ I\ think\ it\ sorts\ by\ alpha\ but\ who\ knows...\r\n
comment9.params=
comment9.target=void\ greyscale()
comment9.text=\r\n\ Greyscales\ the\ image\r\n
numComments=17
